[
  {
    "number": 1,
    "title": "Test Login Successful",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/1",
    "utilsCode": "export async function login(page, username, password) {\n  await page.getByPlaceholder('Username').fill(username);\n  await page.getByPlaceholder('Password').fill(password);\n  await page.getByRole('button', { name: 'Login' }).click();\n}",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { login } from './utils.js';\n\ntest('Test Login Successful', async ({ page }) => {\n  await page.goto('https://www.saucedemo.com/');\n  await login(page, 'standard_user', 'secret_sauce');\n  await expect(page).toHaveURL('https://www.saucedemo.com/inventory.html');\n});",
    "manualSteps": [
      "1. Open a supported browser (Chrome, Edge, Firefox, Safari).",
      "2. Navigate to https://www.saucedemo.com/ and verify the page loads successfully (HTTP 200, title contains 'Swag Labs').",
      "3. Locate the Username input field by its placeholder text 'Username'.",
      "4. Clear any pre-filled text in the Username field.",
      "5. Type the exact string 'standard_user' into the Username field and confirm the value is entered correctly.",
      "6. Locate the Password input field by its placeholder text 'Password'.",
      "7. Clear any pre-filled text in the Password field.",
      "8. Type the exact string 'secret_sauce' into the Password field (characters should be masked).",
      "9. Locate the Login button (visible text 'Login').",
      "10. Click the Login button and verify it becomes disabled or shows a loading state (if applicable).",
      "11. Wait for the URL to change to https://www.saucedemo.com/inventory.html.",
      "12. Verify the inventory page loads completely (check for key elements like the inventory list or page title).",
      "13. Confirm no error messages are displayed on the new page.",
      "14. Capture a screenshot of the inventory page for evidence.",
      "15. Log test result as PASS if all steps complete successfully; otherwise, log as FAIL with detailed observations."
    ]
  },
  {
    "number": 1,
    "title": "Test Login Successful",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/1",
    "utilsCode": "/**\n * utils.js – reusable Playwright helpers for Swag Labs\n * Exports ESM functions\n */\n\n/**\n * Fill username and password and click Login button\n * @param {import('@playwright/test').Page} page\n * @param {string} username\n * @param {string} password\n */\nexport async function login(page, username, password) {\n  const usernameInput = page.locator('input[placeholder=\"Username\"]');\n  const passwordInput = page.locator('input[placeholder=\"Password\"]');\n  const loginButton   = page.locator('input[type=\"submit\"][value=\"Login\"]');\n\n  await usernameInput.fill(username);\n  await passwordInput.fill(password);\n  await loginButton.click();\n}\n\n/**\n * Logout from the inventory page (if user menu exists)\n * @param {import('@playwright/test').Page} page\n */\nexport async function logout(page) {\n  const menuButton = page.locator('#react-burger-menu-btn');\n  const logoutLink = page.locator('#logout_sidebar_link');\n\n  if (await menuButton.isVisible()) {\n    await menuButton.click();\n    await logoutLink.click();\n  }\n}",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { login } from './utils.js';\n\ntest.describe('Login flow', () => {\n  test('successful login with standard_user', async ({ page }) => {\n    await page.goto('https://www.saucedemo.com/');\n\n    // Perform login via reusable helper\n    await login(page, 'standard_user', 'secret_sauce');\n\n    // Verify redirection to inventory\n    await expect(page).toHaveURL('https://www.saucedemo.com/inventory.html');\n\n    // Basic sanity check on inventory page\n    await expect(page.locator('[data-test=\"inventory-container\"]')).toBeVisible();\n  });\n});",
    "manualSteps": [
      "1. Open a clean browser instance (Chrome, Edge, Firefox, or Safari).",
      "2. Navigate to https://www.saucedemo.com/ and verify the page loads completely (no console errors, network calls return 200/304).",
      "3. Verify the login form is visible: locate the Username input field with placeholder text \"Username\".",
      "4. Enter the exact text standard_user into the Username field (no leading/trailing spaces).",
      "5. Verify the Password input field with placeholder text \"Password\" is visible and masked.",
      "6. Enter the exact text secret_sauce into the Password field (masked typing).",
      "7. Verify the Login button is enabled and labeled \"Login\".",
      "8. Click the Login button (left-click, no keyboard submit).",
      "9. Wait for the browser URL to change to https://www.saucedemo.com/inventory.html (explicit wait up to 10 s).",
      "10. Verify the inventory page loads completely: page title contains \"Swag Labs\", inventory container is visible, and no login error messages appear.",
      "11. Capture a screenshot of the inventory page for evidence.",
      "12. Log out (if applicable) and close the browser."
    ]
  },
  {
    "number": 1,
    "title": "Test Login Successful",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/1",
    "utilsCode": "/**\n * Perform login on Swag Labs\n * @param {import('@playwright/test').Page} page\n * @param {string} username\n * @param {string} password\n */\nexport async function login(page, username, password) {\n  await page.getByPlaceholder('Username').fill(username);\n  await page.getByPlaceholder('Password').fill(password);\n  await page.getByRole('button', { name: 'Login' }).click();\n}",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { login } from './utils.js';\n\ntest('Login with standard_user should redirect to inventory page', async ({ page }) => {\n  await page.goto('https://www.saucedemo.com/');\n  await login(page, 'standard_user', 'secret_sauce');\n  await expect(page).toHaveURL('https://www.saucedemo.com/inventory.html');\n});",
    "manualSteps": [
      {
        "step": 1,
        "action": "Open the browser and navigate to https://www.saucedemo.com/",
        "expected": "The Swag Labs login page loads successfully with the URL https://www.saucedemo.com/ displayed in the address bar."
      },
      {
        "step": 2,
        "action": "Locate the Username input field by its placeholder text \"Username\".",
        "expected": "The Username input field is visible and enabled for text entry."
      },
      {
        "step": 3,
        "action": "Enter the text \"standard_user\" into the Username input field.",
        "expected": "The text \"standard_user\" appears in the Username input field."
      },
      {
        "step": 4,
        "action": "Locate the Password input field by its placeholder text \"Password\".",
        "expected": "The Password input field is visible and enabled for text entry."
      },
      {
        "step": 5,
        "action": "Enter the text \"secret_sauce\" into the Password input field.",
        "expected": "The text \"secret_sauce\" appears masked in the Password input field."
      },
      {
        "step": 6,
        "action": "Locate the Login button.",
        "expected": "The Login button is visible and enabled."
      },
      {
        "step": 7,
        "action": "Click the Login button.",
        "expected": "The login request is initiated."
      },
      {
        "step": 8,
        "action": "Wait for the page to load after the login request.",
        "expected": "The browser navigates to https://www.saucedemo.com/inventory.html and the inventory page is displayed."
      },
      {
        "step": 9,
        "action": "Verify the current URL is https://www.saucedemo.com/inventory.html.",
        "expected": "The URL in the address bar matches https://www.saucedemo.com/inventory.html."
      }
    ]
  },
  {
    "number": 1,
    "title": "Test Login Successful",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/1",
    "utilsCode": "/**\n * utils.js – reusable helper functions for Swag Labs tests\n * Export as ESM\n */\n\n/**\n * Perform login on Swag Labs\n * @param {import('@playwright/test').Page} page\n * @param {string} username\n * @param {string} password\n */\nexport async function login(page, username, password) {\n  const userInput = page.locator('input[placeholder=\"Username\"]');\n  const passInput = page.locator('input[placeholder=\"Password\"]');\n  const loginBtn  = page.locator('input[type=\"submit\"][value=\"Login\"], button:has-text(\"Login\")');\n\n  await userInput.clear();\n  await userInput.fill(username);\n  await passInput.clear();\n  await passInput.fill(password);\n  await loginBtn.click();\n  // Wait for navigation to complete\n  await page.waitForLoadState('networkidle');\n}\n\n/**\n * Logout from Swag Labs (via burger menu)\n * @param {import('@playwright/test').Page} page\n */\nexport async function logout(page) {\n  await page.click('button#react-burger-menu-btn');\n  await page.click('a#logout_sidebar_link');\n  await page.waitForLoadState('networkidle');\n}",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { login } from './utils.js';\n\ntest.describe('Swag Labs – Successful Login', () => {\n  test('standard_user can log in and land on inventory page', async ({ page }) => {\n    await page.goto('https://www.saucedemo.com/');\n    await login(page, 'standard_user', 'secret_sauce');\n    await expect(page).toHaveURL('https://www.saucedemo.com/inventory.html');\n  });\n});",
    "manualSteps": [
      "1. Open a supported browser (Chrome, Edge, Firefox, Safari).",
      "2. Navigate to https://www.saucedemo.com/ and verify the page loads completely (check that the login form is visible).",
      "3. Locate the Username input field by its placeholder text “Username”.",
      "4. Clear any pre-filled text and type standard_user into the Username field.",
      "5. Locate the Password input field by its placeholder text “Password”.",
      "6. Clear any pre-filled text and type secret_sauce into the Password field.",
      "7. Locate the Login button (text = “Login”) and verify it is enabled.",
      "8. Click the Login button.",
      "9. Wait for the browser URL to change to https://www.saucedemo.com/inventory.html.",
      "10. Verify the new page loads successfully (check for a visible product list or page title).",
      "11. (Optional) Capture a screenshot for evidence.",
      "12. Log out and close the browser to return to the initial state."
    ]
  },
  {
    "number": 1,
    "title": "Test Login Successful",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/1",
    "utilsCode": "export async function fillInput(page, placeholder, value) {\n  const input = page.locator(`input[placeholder=\"${placeholder}\"]`);\n  await input.waitFor({ state: 'visible' });\n  await input.fill(value);\n}\n\nexport async function clickButton(page, text) {\n  const button = page.locator(`button:has-text(\"${text}\")`);\n  await button.waitFor({ state: 'visible' });\n  await button.click();\n}\n\nexport async function login(page, username, password) {\n  await fillInput(page, 'Username', username);\n  await fillInput(page, 'Password', password);\n  await clickButton(page, 'Login');\n}",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { login } from './utils.js';\n\ntest('Login with standard_user should land on inventory page', async ({ page }) => {\n  await page.goto('https://www.saucedemo.com/');\n  await login(page, 'standard_user', 'secret_sauce');\n  await expect(page).toHaveURL('https://www.saucedemo.com/inventory.html');\n});",
    "manualSteps": [
      "1. Open a new browser tab and navigate to https://www.saucedemo.com/",
      "2. Wait until the login form is fully rendered (both username and password fields are visible and enabled)",
      "3. Click inside the Username input field (placeholder=\"Username\") to focus it",
      "4. Type the exact string standard_user (no leading/trailing spaces)",
      "5. Verify the typed value is displayed as asterisks/bullets if the field masks characters, otherwise verify the exact text",
      "6. Click inside the Password input field (placeholder=\"Password\") to focus it",
      "7. Type the exact string secret_sauce (no leading/trailing spaces)",
      "8. Verify the typed value is visually masked (shown as bullets/discs)",
      "9. Locate the Login button (text equals \"Login\") and verify it is enabled",
      "10. Click the Login button",
      "11. Wait for the browser to finish navigation",
      "12. Verify the URL in the address bar is exactly https://www.saucedemo.com/inventory.html",
      "13. Verify the page displays the inventory list heading (e.g., \"Products\") to confirm successful login"
    ]
  },
  {
    "number": 1,
    "title": "Test Login Successful",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/1",
    "utilsCode": "export async function login(page, username, password) {\n  const userInput = page.locator('input[placeholder=\"Username\"]');\n  const passInput = page.locator('input[placeholder=\"Password\"]');\n  const loginBtn  = page.locator('input[type=\"submit\"][value=\"Login\"], button:has-text(\"Login\")');\n\n  await userInput.waitFor({ state: 'visible' });\n  await userInput.fill(username);\n  await passInput.fill(password);\n  await loginBtn.click();\n  await page.waitForLoadState('networkidle');\n}\n\nexport async function safeLogin(page, username, password) {\n  await page.goto('https://www.saucedemo.com/');\n  await login(page, username, password);\n}",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { login } from './utils.js';\n\ntest('Login with standard_user should land on inventory page', async ({ page }) => {\n  await page.goto('https://www.saucedemo.com/');\n  await login(page, 'standard_user', 'secret_sauce');\n  await expect(page).toHaveURL('https://www.saucedemo.com/inventory.html');\n});",
    "manualSteps": [
      {
        "step": 1,
        "action": "Open a clean browser instance (Chrome, Edge, Firefox or Safari) in private/incognito mode to avoid cached sessions."
      },
      {
        "step": 2,
        "action": "Navigate to https://www.saucedemo.com/ and wait until the login form is fully rendered (i.e., both Username and Password fields are visible and enabled)."
      },
      {
        "step": 3,
        "action": "Locate the input field with the placeholder text “Username” and click inside it to focus."
      },
      {
        "step": 4,
        "action": "Type the exact string standard_user (case-sensitive, no leading/trailing spaces) into the Username field."
      },
      {
        "step": 5,
        "action": "Locate the input field with the placeholder text “Password” and click inside it to focus."
      },
      {
        "step": 6,
        "action": "Type the exact string secret_sauce (case-sensitive, no leading/trailing spaces) into the Password field."
      },
      {
        "step": 7,
        "action": "Verify that both fields contain the correct values (optional visual check)."
      },
      {
        "step": 8,
        "action": "Locate the Login button (text equals “Login”) and click it."
      },
      {
        "step": 9,
        "action": "Wait for the browser to finish navigation and confirm the new URL is exactly https://www.saucedemo.com/inventory.html."
      },
      {
        "step": 10,
        "action": "Verify that the inventory page loads successfully (e.g., page title contains “Swag Labs” and at least one inventory item is displayed)."
      },
      {
        "step": 11,
        "action": "Log test result as PASS if all above conditions are met; otherwise FAIL with detailed notes."
      }
    ]
  },
  {
    "number": 1,
    "title": "Test Login Successful",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/1",
    "utilsCode": "export async function fillField(page, placeholder, value) {\n  const input = page.locator(`input[placeholder=\"${placeholder}\"]`);\n  await input.clear();\n  await input.fill(value);\n}\n\nexport async function login(page, username, password) {\n  await fillField(page, 'Username', username);\n  await fillField(page, 'Password', password);\n  await page.click('input[type=\"submit\"]');\n}",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { login } from './utils.js';\n\ntest('Test Login Successful', async ({ page }) => {\n  await page.goto('https://www.saucedemo.com/');\n  await login(page, 'standard_user', 'secret_sauce');\n  await expect(page).toHaveURL('https://www.saucedemo.com/inventory.html');\n});",
    "manualSteps": [
      "1. Open a supported browser (Chrome, Edge, Firefox, or Safari).",
      "2. Navigate to https://www.saucedemo.com/ and verify the Swag Labs login page loads completely (logo, inputs, and button are visible).",
      "3. Locate the Username input field using its placeholder text \"Username\".",
      "4. Clear any pre-filled text in the Username field (if present).",
      "5. Type the exact string \"standard_user\" into the Username field.",
      "6. Verify the typed value appears correctly in the Username field.",
      "7. Locate the Password input field using its placeholder text \"Password\".",
      "8. Clear any pre-filled text in the Password field (if present).",
      "9. Type the exact string \"secret_sauce\" into the Password field.",
      "10. Verify the typed value is masked (dots/asterisks) in the Password field.",
      "11. Locate the Login button on the page.",
      "12. Click the Login button.",
      "13. Wait for the browser to finish navigating.",
      "14. Verify the URL in the address bar is exactly https://www.saucedemo.com/inventory.html.",
      "15. Verify the Inventory page displays (e.g., product list is visible).",
      "16. (Optional) Log out and close the browser."
    ]
  },
  {
    "number": 1,
    "title": "Test Login Successful",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/1",
    "utilsCode": "export async function fillField(page, placeholder, value) {\n  const input = page.locator(`input[placeholder=\"${placeholder}\"]`);\n  await input.waitFor({ state: 'visible' });\n  await input.clear();\n  await input.fill(value);\n  await expect(input).toHaveValue(value);\n}\n\nexport async function clickButton(page, text) {\n  const button = page.locator(`button:has-text(\"${text}\")`);\n  await button.waitFor({ state: 'visible' });\n  await expect(button).toBeEnabled();\n  await button.click();\n}\n\nexport async function login(page, username, password) {\n  await fillField(page, 'Username', username);\n  await fillField(page, 'Password', password);\n  await clickButton(page, 'Login');\n}",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { login } from './utils.js';\n\ntest('Test Login Successful', async ({ page }) => {\n  await page.goto('https://www.saucedemo.com/');\n  await login(page, 'standard_user', 'secret_sauce');\n  await expect(page).toHaveURL('https://www.saucedemo.com/inventory.html');\n  await expect(page.locator('.inventory_list')).toBeVisible();\n});",
    "manualSteps": [
      "1. Open a supported browser (Chrome, Firefox, Edge, Safari).",
      "2. Navigate to https://www.saucedemo.com/.",
      "3. Wait until the login form is fully rendered (both inputs and the button are visible).",
      "4. Locate the input field with the placeholder text \"Username\".",
      "5. Click inside the Username field to focus it.",
      "6. Clear any pre-filled text (if present).",
      "7. Type the exact string standard_user into the Username field.",
      "8. Verify that the typed value appears correctly without extra spaces.",
      "9. Locate the input field with the placeholder text \"Password\".",
      "10. Click inside the Password field to focus it.",
      "11. Clear any pre-filled text (if present).",
      "12. Type the exact string secret_sauce into the Password field.",
      "13. Verify that the typed value is masked (shows bullets/dots).",
      "14. Locate the Login button (text equals \"Login\").",
      "15. Verify the Login button is enabled.",
      "16. Click the Login button.",
      "17. Wait for the browser URL to change to https://www.saucedemo.com/inventory.html.",
      "18. Verify that the new page title contains \"Swag Labs\".",
      "19. Verify that at least one inventory item is visible on the page.",
      "20. Capture a screenshot of the inventory page for evidence (optional)."
    ]
  },
  {
    "number": 1,
    "title": "Test Login Successful",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/1",
    "utilsCode": "/**\n * utils.js – reusable Playwright helpers for Swag Labs\n */\n\n/**\n * Logs a user into Swag Labs.\n * @param {import('@playwright/test').Page} page – Playwright page object\n * @param {string} username – username to enter\n * @param {string} password – password to enter\n */\nexport async function login(page, username, password) {\n  const userInput = page.locator('input[placeholder=\"Username\"]');\n  const passInput = page.locator('input[placeholder=\"Password\"]');\n  const loginBtn  = page.locator('input[type=\"submit\"][value=\"Login\"]');\n\n  await userInput.clear();\n  await userInput.fill(username);\n  await passInput.clear();\n  await passInput.fill(password);\n  await loginBtn.click();\n}\n\n/**\n * Logs a user out of Swag Labs (from any internal page).\n * @param {import('@playwright/test').Page} page – Playwright page object\n */\nexport async function logout(page) {\n  await page.click('#react-burger-menu-btn');\n  await page.click('a[data-test=\"logout-sidebar-link\"]');\n  await page.waitForURL('https://www.saucedemo.com/');\n}",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { login } from './utils.js';\n\ntest.describe('Swag Labs Login', () => {\n  test('successful login with standard_user', async ({ page }) => {\n    await page.goto('https://www.saucedemo.com/');\n\n    // Verify login form is visible\n    await expect(page.locator('input[placeholder=\"Username\"]')).toBeVisible();\n    await expect(page.locator('input[placeholder=\"Password\"]')).toBeVisible();\n    await expect(page.locator('input[type=\"submit\"][value=\"Login\"]')).toBeVisible();\n\n    // Perform login via reusable helper\n    await login(page, 'standard_user', 'secret_sauce');\n\n    // Verify navigation to inventory page\n    await expect(page).toHaveURL('https://www.saucedemo.com/inventory.html');\n\n    // Verify inventory page loaded\n    await expect(page.locator('.title')).toHaveText('Products');\n    await expect(page.locator('.shopping_cart_link')).toBeVisible();\n  });\n});",
    "manualSteps": [
      "1. Open a supported browser (Chrome, Edge, Firefox, Safari).",
      "2. Navigate to https://www.saucedemo.com/ and verify the page loads completely (no 4xx/5xx errors).",
      "3. Verify the login form is visible by checking the presence of the Username and Password fields and the Login button.",
      "4. Locate the Username input field (placeholder='Username').",
      "5. Clear any pre-filled text in the Username field.",
      "6. Enter the exact text standard_user into the Username field.",
      "7. Verify the entered text is displayed as asterisks/bullets in the Username field (optional visual check).",
      "8. Locate the Password input field (placeholder='Password').",
      "9. Clear any pre-filled text in the Password field.",
      "10. Enter the exact text secret_sauce into the Password field.",
      "11. Verify the entered text is masked in the Password field.",
      "12. Locate the Login button (text='Login').",
      "13. Click the Login button.",
      "14. Verify the browser navigates to https://www.saucedemo.com/inventory.html (URL check).",
      "15. Verify the inventory page loads completely (no 4xx/5xx errors).",
      "16. Verify the presence of the primary header 'Products' or equivalent to confirm successful login.",
      "17. Optionally, verify the shopping cart icon is visible to ensure the inventory page is fully rendered.",
      "18. Logout and close the browser (cleanup)."
    ]
  },
  {
    "number": 1,
    "title": "Test Login Successful",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/1",
    "utilsCode": "export async function login(page, username, password) {\n  await page.fill('[data-test=\"username\"]', username);\n  await page.fill('[data-test=\"password\"]', password);\n  await page.click('[data-test=\"login-button\"]');\n}\n\nexport async function logout(page) {\n  await page.click('#react-burger-menu-btn');\n  await page.click('[data-test=\"logout-sidebar-link\"]');\n}\n\nexport async function waitForInventoryPage(page) {\n  await page.waitForURL('https://www.saucedemo.com/inventory.html');\n}",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { login } from './utils.js';\n\ntest('Test Login Successful', async ({ page }) => {\n  await page.goto('https://www.saucedemo.com/');\n  await login(page, 'standard_user', 'secret_sauce');\n  await expect(page).toHaveURL('https://www.saucedemo.com/inventory.html');\n  await expect(page.locator('.inventory_list')).toBeVisible();\n});",
    "manualSteps": [
      "1. Open a supported browser (Chrome, Edge, Firefox, Safari).",
      "2. Navigate to https://www.saucedemo.com/.",
      "3. Wait until the login form is visible (look for the placeholder text 'Username' and 'Password').",
      "4. Click inside the Username input field to focus it.",
      "5. Clear any pre-filled text (if present).",
      "6. Type the exact string standard_user (case-sensitive, no leading/trailing spaces).",
      "7. Click inside the Password input field to focus it.",
      "8. Clear any pre-filled text (if present).",
      "9. Type the exact string secret_sauce (case-sensitive, no leading/trailing spaces).",
      "10. Click the Login button (text equals 'Login').",
      "11. Wait for the browser URL to change to https://www.saucedemo.com/inventory.html.",
      "12. Verify that the new page title contains 'Swag Labs' or similar expected text.",
      "13. Verify that at least one inventory item is displayed (confirming successful login).",
      "14. Log the test result as PASS if all steps complete without error; otherwise FAIL with reason."
    ]
  },
  {
    "number": 1,
    "title": "Test Login Successful",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/1",
    "utilsCode": "/**\n * utils.js – reusable helpers for Swag Labs tests\n */\n\n/**\n * Perform a full login flow on https://www.saucedemo.com/\n * @param {import('@playwright/test').Page} page\n * @param {string} username\n * @param {string} password\n */\nexport async function login(page, username, password) {\n  // Locators are resilient to DOM churn: prefer role+label when possible\n  const usernameInput = page.getByRole('textbox', { name: /username/i });\n  const passwordInput = page.getByRole('textbox', { name: /password/i });\n  const loginButton   = page.getByRole('button', { name: /login/i });\n\n  await usernameInput.fill(username);\n  await passwordInput.fill(password);\n  await loginButton.click();\n}\n\n/**\n * Wait for the inventory page to load and return the Products heading locator\n * @param {import('@playwright/test').Page} page\n */\nexport async function waitForInventoryPage(page) {\n  await page.waitForURL('https://www.saucedemo.com/inventory.html');\n  return page.getByRole('heading', { name: /products/i });\n}",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { login } from './utils.js';\n\ntest('Login with standard_user should land on inventory page', async ({ page }) => {\n  await page.goto('https://www.saucedemo.com/');\n  await login(page, 'standard_user', 'secret_sauce');\n  await expect(page).toHaveURL('https://www.saucedemo.com/inventory.html');\n});",
    "manualSteps": [
      "1. Open a supported browser (Chrome, Edge, Firefox, or Safari).",
      "2. Navigate to https://www.saucedemo.com/ and verify the Swag Labs login page loads completely (logo, username field, password field, and Login button are visible).",
      "3. Locate the Username input field (placeholder text = \"Username\").",
      "4. Click inside the Username field to focus it.",
      "5. Type the exact string standard_user (no leading/trailing spaces).",
      "6. Verify the typed value appears in the field.",
      "7. Locate the Password input field (placeholder text = \"Password\").",
      "8. Click inside the Password field to focus it.",
      "9. Type the exact string secret_sauce (masked characters are expected).",
      "10. Verify the typed value is masked (bullets/asterisks).",
      "11. Locate the Login button (text = \"Login\").",
      "12. Click the Login button.",
      "13. Wait for the browser to finish navigation.",
      "14. Verify the URL in the address bar is exactly https://www.saucedemo.com/inventory.html.",
      "15. Verify the inventory page contains the primary heading \"Products\" (or equivalent) to confirm successful login."
    ]
  },
  {
    "number": 1,
    "title": "Test Login Successful",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/1",
    "utilsCode": "export async function fillField(page, selector, value) {\n  const field = page.locator(selector);\n  await field.clear();\n  await field.fill(value);\n  await field.press('Tab'); // trigger blur to ensure value sticks\n}\n\nexport async function login(page, username, password) {\n  await fillField(page, '[data-test=\"username\"]', username);\n  await fillField(page, '[data-test=\"password\"]', password);\n  await page.click('[data-test=\"login-button\"]');\n}",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { login } from './utils.js';\n\ntest('Test Login Successful', async ({ page }) => {\n  await page.goto('https://www.saucedemo.com/');\n  await login(page, 'standard_user', 'secret_sauce');\n  await expect(page).toHaveURL('https://www.saucedemo.com/inventory.html');\n  await expect(page.locator('[data-test=\"title\"]')).toHaveText('Products');\n});",
    "manualSteps": [
      "1. Open a supported browser (Chrome, Edge, Firefox, or Safari).",
      "2. Navigate to https://www.saucedemo.com/ and verify the page loads successfully (HTTP 200).",
      "3. Verify the login form is visible within 5 seconds.",
      "4. Locate the username input field using its placeholder attribute 'Username'.",
      "5. Clear any pre-filled text in the username field.",
      "6. Type the exact string 'standard_user' into the username field.",
      "7. Verify the entered text equals 'standard_user'.",
      "8. Locate the password input field using its placeholder attribute 'Password'.",
      "9. Clear any pre-filled text in the password field.",
      "10. Type the exact string 'secret_sauce' into the password field.",
      "11. Verify the password field masks the entered characters.",
      "12. Locate the Login button via its text content 'Login'.",
      "13. Click the Login button.",
      "14. Verify the browser navigates to https://www.saucedemo.com/inventory.html within 5 seconds.",
      "15. Verify the inventory page displays the primary heading 'Products'.",
      "16. Verify no error messages appear on the new page.",
      "17. Capture a screenshot of the inventory page for evidence.",
      "18. Log the test result as 'Pass' if all steps succeed, otherwise 'Fail'."
    ]
  },
  {
    "number": 1,
    "title": "Test Login Successful",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/1",
    "utilsCode": "export async function fillField(page, selector, value) {\n  const field = page.locator(selector);\n  await field.clear();\n  await field.fill(value);\n  await expect(field).toHaveValue(value);\n}\n\nexport async function login(page, username, password) {\n  await fillField(page, 'input[data-test=\"username\"]', username);\n  await fillField(page, 'input[data-test=\"password\"]', password);\n  await page.locator('input[data-test=\"login-button\"]').click();\n}",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { login } from './utils.js';\n\ntest('Login with standard_user should land on inventory page', async ({ page }) => {\n  await page.goto('https://www.saucedemo.com/');\n  await login(page, 'standard_user', 'secret_sauce');\n  await expect(page).toHaveURL('https://www.saucedemo.com/inventory.html');\n  await expect(page.locator('#inventory_container')).toBeVisible();\n});",
    "manualSteps": [
      "1. Open a clean browser instance (Chrome, Edge, Firefox, or Safari).",
      "2. Navigate to https://www.saucedemo.com/ and verify the page loads completely (HTTP 200, no console errors).",
      "3. Locate the Username field by its placeholder text \"Username\" (CSS selector: input[data-test='username']).",
      "4. Clear any pre-filled text in the Username field (if present).",
      "5. Type the exact string standard_user into the Username field (no leading/trailing spaces).",
      "6. Verify the typed value is visible and matches standard_user.",
      "7. Locate the Password field by its placeholder text \"Password\" (CSS selector: input[data-test='password']).",
      "8. Clear any pre-filled text in the Password field (if present).",
      "9. Type the exact string secret_sauce into the Password field (value will be masked).",
      "10. Verify the Password field is not empty (masking prevents visual verification of exact text).",
      "11. Locate the Login button by its text \"Login\" (CSS selector: input[data-test='login-button']).",
      "12. Click the Login button and verify it becomes disabled or shows a loading spinner (if applicable).",
      "13. Wait for the URL to change to https://www.saucedemo.com/inventory.html (explicit wait up to 10 s).",
      "14. Verify the inventory page loads completely (HTTP 200, no console errors, page title \"Swag Labs\").",
      "15. Confirm the inventory container (div#inventory_container) is visible and contains at least one product card.",
      "16. Log out via the burger-menu ➜ Logout to return the session to a clean state (optional but recommended for repeatability)."
    ]
  },
  {
    "number": 1,
    "title": "Test Login Successful",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/1",
    "utilsCode": "export async function login(page, username, password) {\n  await page.getByPlaceholder('Username').fill(username);\n  await page.getByPlaceholder('Password').fill(password);\n  await page.getByRole('button', { name: 'Login' }).click();\n}",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { login } from './utils.js';\n\ntest('successful login with standard_user', async ({ page }) => {\n  await page.goto('https://www.saucedemo.com/');\n  await login(page, 'standard_user', 'secret_sauce');\n  await expect(page).toHaveURL('https://www.saucedemo.com/inventory.html');\n  await expect(page.locator('.inventory_item')).toHaveCountGreaterThan(0);\n});",
    "manualSteps": [
      "1. Open a new browser tab and navigate to https://www.saucedemo.com/",
      "2. Wait until the login form is fully rendered (both username and password fields are visible)",
      "3. Locate the username input field by its placeholder text 'Username'",
      "4. Clear any pre-filled value in the username field",
      "5. Type the exact string 'standard_user' into the username field",
      "6. Locate the password input field by its placeholder text 'Password'",
      "7. Clear any pre-filled value in the password field",
      "8. Type the exact string 'secret_sauce' into the password field",
      "9. Locate the Login button (text equals 'Login')",
      "10. Click the Login button",
      "11. Wait for the browser to finish navigation",
      "12. Verify the current URL is https://www.saucedemo.com/inventory.html",
      "13. Verify that the inventory page displays at least one product card to confirm successful login"
    ]
  },
  {
    "number": 1,
    "title": "Test Login Successful",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/1",
    "utilsCode": "export async function login(page, username, password) {\n  await page.fill('[data-test=\"username\"]', username);\n  await page.fill('[data-test=\"password\"]', password);\n  await page.click('[data-test=\"login-button\"]');\n}\n\nexport async function logout(page) {\n  await page.click('#react-burger-menu-btn');\n  await page.click('[data-test=\"logout-sidebar-link\"]');\n}",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { login } from './utils.js';\n\ntest('successful login with standard_user', async ({ page }) => {\n  await page.goto('https://www.saucedemo.com/');\n  await login(page, 'standard_user', 'secret_sauce');\n  await expect(page).toHaveURL('https://www.saucedemo.com/inventory.html');\n  await expect(page.locator('[data-test=\"title\"]')).toHaveText('Products');\n});",
    "manualSteps": [
      "1. Open a clean browser instance (Chrome/Firefox/Edge) in incognito/private mode to ensure no cached data.",
      "2. Navigate to https://www.saucedemo.com/ and wait until the page fully loads (verify the URL and page title 'Swag Labs').",
      "3. Locate the Username input field (placeholder='Username') and confirm it is empty and enabled.",
      "4. Enter the exact text standard_user into the Username field (no leading/trailing spaces).",
      "5. Locate the Password input field (placeholder='Password') and confirm it is masked and enabled.",
      "6. Enter the exact text secret_sauce into the Password field.",
      "7. Locate the Login button and confirm it is visible and enabled.",
      "8. Click the Login button.",
      "9. Wait for the browser to complete navigation and verify the new URL is https://www.saucedemo.com/inventory.html.",
      "10. Confirm the inventory page displays the page heading 'Products' and at least one inventory item card is present.",
      "11. Capture a screenshot of the inventory page for evidence.",
      "12. Log out (via the burger menu → Logout) to return to the login page and reset state for future tests."
    ]
  },
  {
    "number": 1,
    "title": "Test Login Successful",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/1",
    "utilsCode": "export async function login(page, username, password) {\n  await page.fill('input[placeholder=\"Username\"]', username);\n  await page.fill('input[placeholder=\"Password\"]', password);\n  await page.click('input[type=\"submit\"]');\n}",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { login } from './utils.js';\n\ntest('Test Login Successful', async ({ page }) => {\n  await page.goto('https://www.saucedemo.com/');\n  await expect(page).toHaveTitle(/Swag Labs/);\n\n  await login(page, 'standard_user', 'secret_sauce');\n\n  await expect(page).toHaveURL('https://www.saucedemo.com/inventory.html');\n  await expect(page.locator('text=Products')).toBeVisible();\n});",
    "manualSteps": [
      "1. Open a clean browser instance (Chrome/Firefox/Edge) in incognito/private mode.",
      "2. Navigate to https://www.saucedemo.com/ and confirm the page title is 'Swag Labs'.",
      "3. Verify that the Username field (placeholder='Username') is visible and enabled.",
      "4. Enter the exact text standard_user into the Username field and confirm the value is displayed.",
      "5. Verify that the Password field (placeholder='Password') is visible and enabled.",
      "6. Enter the exact text secret_sauce into the Password field (value should be masked).",
      "7. Verify that the Login button is visible and enabled.",
      "8. Click the Login button.",
      "9. Wait for the browser URL to change to https://www.saucedemo.com/inventory.html.",
      "10. Confirm the new page title is 'Swag Labs' and the heading 'Products' is visible.",
      "11. Log the test result as PASS if all assertions succeed; otherwise, capture a screenshot and log as FAIL."
    ]
  },
  {
    "number": 1,
    "title": "Test Login Successful",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/1",
    "utilsCode": "export async function login(page, username, password) {\n  await page.fill('[data-test=\"username\"]', username);\n  await page.fill('[data-test=\"password\"]', password);\n  await page.click('[data-test=\"login-button\"]');\n}\n\nexport async function logout(page) {\n  await page.click('#react-burger-menu-btn');\n  await page.click('[data-test=\"logout-sidebar-link\"]');\n  await expect(page).toHaveURL('https://www.saucedemo.com/');\n}",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { login } from './utils.js';\n\ntest('Test Login Successful', async ({ page }) => {\n  await page.goto('https://www.saucedemo.com/');\n  await login(page, 'standard_user', 'secret_sauce');\n  await expect(page).toHaveURL('https://www.saucedemo.com/inventory.html');\n  await expect(page.locator('[data-test=\"title\"]')).toContainText('Products');\n});",
    "manualSteps": [
      "1. Open a clean browser instance (Chrome/Firefox/Edge) in incognito/private mode.",
      "2. Navigate to https://www.saucedemo.com/ and confirm the page title is 'Swag Labs'.",
      "3. Verify that the Username input field is visible and has the placeholder text 'Username'.",
      "4. Enter the exact text standard_user into the Username field and confirm the value is entered correctly.",
      "5. Verify that the Password input field is visible and has the placeholder text 'Password'.",
      "6. Enter the exact text secret_sauce into the Password field (masking should be applied).",
      "7. Verify that the Login button is visible and enabled.",
      "8. Click the Login button and observe that no error messages appear.",
      "9. Wait for the browser URL to change to https://www.saucedemo.com/inventory.html.",
      "10. Confirm that the new page contains the text 'Products' in the header and at least one inventory item is displayed.",
      "11. Log the test result as PASS if all steps complete without deviation; otherwise, capture console errors and UI messages for investigation."
    ]
  },
  {
    "number": 1,
    "title": "Test Login Successful",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/1",
    "utilsCode": "export async function login(page, username, password) {\n  await page.fill('input[placeholder=\"Username\"]', username);\n  await page.fill('input[placeholder=\"Password\"]', password);\n  await page.click('input[type=\"submit\"]');\n}",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { login } from './utils.js';\n\ntest.describe('Login flow', () => {\n  test('successful login with standard_user', async ({ page }) => {\n    await page.goto('https://www.saucedemo.com/');\n    await login(page, 'standard_user', 'secret_sauce');\n    await expect(page).toHaveURL('https://www.saucedemo.com/inventory.html');\n  });\n});",
    "manualSteps": [
      "1. Open a clean browser instance (Chrome/Firefox/Edge) in private/incognito mode.",
      "2. Navigate to https://www.saucedemo.com/ and wait until the page finishes loading (verify the Saucedemo logo is visible).",
      "3. Locate the Username input field (placeholder = \"Username\") and confirm it is empty and enabled.",
      "4. Enter the exact text standard_user into the Username field (no leading/trailing spaces).",
      "5. Locate the Password input field (placeholder = \"Password\") and confirm it is masked and enabled.",
      "6. Enter the exact text secret_sauce into the Password field (no leading/trailing spaces).",
      "7. Locate the Login button and confirm it is visible and enabled.",
      "8. Click the Login button.",
      "9. Wait for the browser to complete navigation and verify the URL is now https://www.saucedemo.com/inventory.html.",
      "10. Confirm the inventory page header (e.g., \"Products\") is displayed to ensure successful login."
    ]
  },
  {
    "number": 1,
    "title": "Test Login Successful",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/1",
    "utilsCode": "export async function login(page, username, password) {\n  await page.fill('[data-test=\"username\"]', username);\n  await page.fill('[data-test=\"password\"]', password);\n  await page.click('[data-test=\"login-button\"]');\n  await page.waitForURL('**/inventory.html');\n}\n\nexport async function logout(page) {\n  await page.click('#react-burger-menu-btn');\n  await page.click('[data-test=\"logout-sidebar-link\"]');\n  await page.waitForURL('**/');\n}",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { login } from './utils.js';\n\ntest.describe('Login flow', () => {\n  test('successful login with standard_user', async ({ page }) => {\n    await page.goto('https://www.saucedemo.com/');\n    await login(page, 'standard_user', 'secret_sauce');\n    await expect(page).toHaveURL('https://www.saucedemo.com/inventory.html');\n    await expect(page.locator('[data-test=\"title\"]')).toHaveText('Products');\n  });\n});",
    "manualSteps": [
      "1. Open a clean browser instance (Chrome/Firefox/Edge) in incognito/private mode.",
      "2. Navigate to https://www.saucedemo.com/ and confirm the page title is 'Swag Labs'.",
      "3. Verify that the Username field (placeholder='Username') is visible and enabled.",
      "4. Enter the exact text standard_user into the Username field and confirm the value is displayed.",
      "5. Verify that the Password field (placeholder='Password') is visible and enabled.",
      "6. Enter the exact text secret_sauce into the Password field (asterisks should mask the characters).",
      "7. Verify that the Login button is visible, enabled, and labeled 'Login'.",
      "8. Click the Login button and wait for the browser to process the request.",
      "9. Confirm that the URL changes to https://www.saucedemo.com/inventory.html.",
      "10. Verify that the inventory page header 'Products' is displayed, indicating a successful login."
    ]
  },
  {
    "number": 1,
    "title": "Test Login Successful",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/1",
    "utilsCode": "export async function login(page, username, password) {\n  await page.fill('[data-test=\"username\"]', username);\n  await page.fill('[data-test=\"password\"]', password);\n  await page.click('[data-test=\"login-button\"]');\n}\n\nexport async function logout(page) {\n  await page.click('#react-burger-menu-btn');\n  await page.click('[data-test=\"logout-sidebar-link\"]');\n  await page.waitForURL('https://www.saucedemo.com/');\n}",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { login } from './utils.js';\n\ntest.describe('Login Flow', () => {\n  test('successful login with standard_user', async ({ page }) => {\n    await page.goto('https://www.saucedemo.com/');\n    await expect(page).toHaveTitle(/Swag Labs/);\n\n    await login(page, 'standard_user', 'secret_sauce');\n\n    await expect(page).toHaveURL('https://www.saucedemo.com/inventory.html');\n    await expect(page.locator('.title')).toContainText('Products');\n  });\n});",
    "manualSteps": [
      "1. Open a clean browser instance (Chrome/Firefox/Edge) in incognito/private mode.",
      "2. Navigate to https://www.saucedemo.com/ and verify the page title contains 'Swag Labs'.",
      "3. Locate the Username input field (placeholder='Username') and confirm it is empty and enabled.",
      "4. Enter the exact text standard_user into the Username field and verify the value is displayed.",
      "5. Locate the Password input field (placeholder='Password') and confirm it is empty and masked.",
      "6. Enter the exact text secret_sauce into the Password field and verify the value is masked.",
      "7. Locate the Login button and confirm it is visible and enabled.",
      "8. Click the Login button and verify no JavaScript errors appear in the console.",
      "9. Wait for the URL to change to https://www.saucedemo.com/inventory.html.",
      "10. Confirm the new page contains the text 'Products' in the header and at least one inventory item is displayed.",
      "11. Capture a screenshot of the inventory page for evidence.",
      "12. Log out (via the burger menu → Logout) to return to the login page and verify the fields are cleared."
    ]
  },
  {
    "number": 1,
    "title": "Test Login Successful",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/1",
    "utilsCode": "export async function login(page, username, password) {\n  await page.fill('input[placeholder=\"Username\"]', username);\n  await page.fill('input[placeholder=\"Password\"]', password);\n  await page.click('input[type=\"submit\"][value=\"Login\"], input[type=\"submit\"][data-test=\"login-button\"], button:has-text(\"Login\")');\n  await page.waitForURL('**/inventory.html');\n}",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { login } from './utils.js';\n\ntest('Test Login Successful', async ({ page }) => {\n  await page.goto('https://www.saucedemo.com/');\n  await login(page, 'standard_user', 'secret_sauce');\n  await expect(page).toHaveURL('https://www.saucedemo.com/inventory.html');\n});",
    "manualSteps": [
      "1. Open a clean browser instance (Chrome/Firefox/Edge) in incognito/private mode.",
      "2. Navigate to https://www.saucedemo.com/ and wait until the page finishes loading (check that the URL is correct and the page title contains 'Swag Labs').",
      "3. Verify that the 'Username' input field is visible and enabled (placeholder text must be 'Username').",
      "4. Enter the exact text standard_user into the Username field (no leading/trailing spaces).",
      "5. Verify that the 'Password' input field is visible and enabled (placeholder text must be 'Password').",
      "6. Enter the exact text secret_sauce into the Password field (no leading/trailing spaces).",
      "7. Verify that the Login button is visible, enabled, and has the text 'Login'.",
      "8. Click the Login button (left-click, no keyboard shortcuts).",
      "9. Wait for the browser to complete navigation and confirm the new URL is https://www.saucedemo.com/inventory.html.",
      "10. Verify that the inventory page is fully rendered (e.g., page title contains 'Products' and at least one inventory item is displayed).",
      "11. Log the test result as 'Pass' if all steps complete without errors; otherwise attach screenshots and console logs."
    ]
  },
  {
    "number": 1,
    "title": "Test Login Successful",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/1",
    "utilsCode": "export async function login(page, username, password) {\n  await page.fill('[data-test=\"username\"]', username);\n  await page.fill('[data-test=\"password\"]', password);\n  await page.click('[data-test=\"login-button\"]');\n}\n\nexport async function logout(page) {\n  await page.click('#react-burger-menu-btn');\n  await page.click('[data-test=\"logout-sidebar-link\"]');\n}",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { login } from './utils.js';\n\ntest('Test Login Successful', async ({ page }) => {\n  await page.goto('https://www.saucedemo.com/');\n  await login(page, 'standard_user', 'secret_sauce');\n  await expect(page).toHaveURL('https://www.saucedemo.com/inventory.html');\n  await expect(page.locator('[data-test=\"title\"]')).toContainText('Products');\n});",
    "manualSteps": [
      "1. Open a browser and navigate to https://www.saucedemo.com/",
      "2. Verify that the page title is 'Swag Labs' and both the Username and Password fields are visible.",
      "3. Click inside the Username input field (placeholder='Username').",
      "4. Type the exact text standard_user into the Username field and confirm the value is entered correctly.",
      "5. Click inside the Password input field (placeholder='Password').",
      "6. Type the exact text secret_sauce into the Password field (masked characters are expected).",
      "7. Click the Login button (text='Login').",
      "8. Wait for the browser to finish loading the next page.",
      "9. Verify the URL is now https://www.saucedemo.com/inventory.html.",
      "10. Confirm that the inventory page displays the products header (e.g., 'Products') to ensure a successful login."
    ]
  },
  {
    "number": 2,
    "title": "Test User Locked",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/2",
    "utilsCode": "export async function login(page, username, password) {\n  await page.fill('input[placeholder=\"Username\"]', username);\n  await page.fill('input[placeholder=\"Password\"]', password);\n  await page.click('input[data-test=\"login-button\"]');\n}",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { login } from './utils.js';\n\ntest('locked-out user sees correct error message', async ({ page }) => {\n  await page.goto('https://www.saucedemo.com/');\n  await login(page, 'locked_out_user', 'secret_sauce');\n  const errorLocator = page.locator('[data-test=\"error\"]');\n  await expect(errorLocator).toBeVisible();\n  await expect(errorLocator).toHaveText('Epic sadface: Sorry, this user has been locked out.');\n});",
    "manualSteps": [
      "1. Open a browser and navigate to https://www.saucedemo.com/",
      "2. Wait until the login form is fully rendered (both inputs and the login button are visible)",
      "3. Locate the Username input field using its placeholder text 'Username'",
      "4. Click inside the Username field and type the exact string locked_out_user",
      "5. Locate the Password input field using its placeholder text 'Password'",
      "6. Click inside the Password field and type the exact string secret_sauce",
      "7. Locate the Login button and click it",
      "8. Wait for the error container to appear on the page",
      "9. Verify that the error container is visible",
      "10. Verify that the error text is exactly 'Epic sadface: Sorry, this user has been locked out.'",
      "11. (Optional) Take a screenshot of the error state for evidence"
    ]
  }
]
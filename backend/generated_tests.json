[
  {
    "title": "Endpoint - update POST webhook settings behavior",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/4",
    "utilsCode": "import { expect } from '@playwright/test';\n\n/**\n * Sends an API request using Playwright's page.request context.\n * @param {import('@playwright/test').Page} page\n * @param {'GET'|'POST'|'PUT'|'DELETE'} method\n * @param {string} url\n * @param {object} payload\n * @returns {Promise<import('@playwright/test').APIResponse>}\n */\nexport async function sendApiRequest(page, method, url, payload = undefined) {\n  const options = {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n    },\n  };\n  if (payload !== undefined) {\n    options.data = JSON.stringify(payload);\n  }\n  return await page.request.fetch(url, options);\n}\n\n/**\n * Verifies that the API response contains the expected fields and values.\n * @param {import('@playwright/test').APIResponse} response\n * @param {object} expectedFields - An object with keys and expected values to check in the response JSON.\n */\nexport async function verifyApiResponse(response, expectedFields) {\n  expect(response.ok()).toBeTruthy();\n  const json = await response.json();\n  for (const [key, expectedValue] of Object.entries(expectedFields)) {\n    if (expectedValue === undefined) continue;\n    if (typeof expectedValue === 'function') {\n      // Allow passing a function for custom validation\n      expect(expectedValue(json[key])).toBeTruthy();\n    } else {\n      expect(json[key]).toEqual(expectedValue);\n    }\n  }\n  return json;\n}\n",
    "playwrightCode": "import { test } from '@playwright/test';\nimport { sendApiRequest, verifyApiResponse } from '../utils/utils.js';\n\nconst API_URL = 'http://localhost:3000/webhook/settings/';\n\ntest.describe('POST /webhook/settings/ - Add Webhook Configurations', () => {\n  test('Happy path: Add two new webhook configurations, nothing deleted', async ({ page }) => {\n    // Example payload with two webhooks\n    const payload = [\n      {\n        Name: 'test1',\n        Active: true,\n        Authorization: null,\n        Url: 'http://localhost:3000/webhook',\n        PayloadMaxItems: 500,\n        PayloadInterval: 1,\n        Triggers: {\n          POSubmit: { Enabled: true, Filter: 'ApprovalCode = A' },\n          TOSubmit: { Enabled: true, Filter: null },\n          WOSubmit: { Enabled: true, Filter: null },\n          InventoryPolicyUpdate: { Enabled: false, Filter: null },\n          ForecastWeeklyUpdate: { Enabled: true, Filter: null },\n          ForecastMonthlyUpdate: { Enabled: false, Filter: null }\n        },\n        RetryHandling: { Attempts: 5, Gap: 10 },\n        ConfigurationMode: 'v1'\n      },\n      {\n        Name: 'test2',\n        Active: false,\n        Authorization: null,\n        Url: 'http://localhost:3000/webhook2',\n        PayloadMaxItems: 100,\n        PayloadInterval: 2,\n        Triggers: {\n          POSubmit: { Enabled: false, Filter: null },\n          TOSubmit: { Enabled: false, Filter: null },\n          WOSubmit: { Enabled: false, Filter: null },\n          InventoryPolicyUpdate: { Enabled: false, Filter: null },\n          ForecastWeeklyUpdate: { Enabled: false, Filter: null },\n          ForecastMonthlyUpdate: { Enabled: false, Filter: null }\n        },\n        RetryHandling: { Attempts: 3, Gap: 5 },\n        ConfigurationMode: 'v1'\n      }\n    ];\n\n    const response = await sendApiRequest(page, 'POST', API_URL, payload);\n    const json = await verifyApiResponse(response, {\n      Status: 'success',\n      Reason: 'New webhook(s) configured. Any updates to a webhook configuration should use the PUT method.',\n      TotalConfigurations: 2,\n      // NewConfigurations: array, checked below\n    });\n\n    // Validate NewConfigurations array\n    expect(Array.isArray(json.NewConfigurations)).toBeTruthy();\n    expect(json.NewConfigurations.length).toBe(2);\n    // Validate first webhook config fields\n    const first = json.NewConfigurations[0];\n    expect(first.Name).toBe('test1');\n    expect(first.Active).toBe(true);\n    expect(first.Url).toBe('http://localhost:3000/webhook');\n    expect(first.PayloadMaxItems).toBe(500);\n    expect(first.PayloadInterval).toBe(1);\n    expect(first.Triggers.POSubmit.Enabled).toBe(true);\n    expect(first.Triggers.POSubmit.Filter).toBe('ApprovalCode = A');\n    expect(first.Triggers.ForecastWeeklyUpdate.Enabled).toBe(true);\n    expect(first.Triggers.ForecastMonthlyUpdate.Enabled).toBe(false);\n    expect(first.RetryHandling.Attempts).toBe(5);\n    expect(first.RetryHandling.Gap).toBe(10);\n    expect(first.ConfigurationMode).toBe('v1');\n    expect(typeof first.PreferencesUpdated).toBe('string');\n    // Validate second webhook config fields\n    const second = json.NewConfigurations[1];\n    expect(second.Name).toBe('test2');\n    expect(second.Active).toBe(false);\n    expect(second.Url).toBe('http://localhost:3000/webhook2');\n    expect(second.PayloadMaxItems).toBe(100);\n    expect(second.PayloadInterval).toBe(2);\n    expect(second.Triggers.POSubmit.Enabled).toBe(false);\n    expect(second.RetryHandling.Attempts).toBe(3);\n    expect(second.RetryHandling.Gap).toBe(5);\n    expect(second.ConfigurationMode).toBe('v1');\n    expect(typeof second.PreferencesUpdated).toBe('string');\n  });\n\n  test('Edge case: Hash initialization delay message for new trigger', async ({ page }) => {\n    // Payload with a new trigger that requires hash initialization\n    const payload = [\n      {\n        Name: 'test3',\n        Active: true,\n        Authorization: null,\n        Url: 'http://localhost:3000/webhook3',\n        PayloadMaxItems: 200,\n        PayloadInterval: 1,\n        Triggers: {\n          POSubmit: { Enabled: true, Filter: null },\n          TOSubmit: { Enabled: false, Filter: null },\n          WOSubmit: { Enabled: false, Filter: null },\n          InventoryPolicyUpdate: { Enabled: false, Filter: null },\n          ForecastWeeklyUpdate: { Enabled: false, Filter: null },\n          ForecastMonthlyUpdate: { Enabled: false, Filter: null }\n        },\n        RetryHandling: { Attempts: 2, Gap: 3 },\n        ConfigurationMode: 'v1'\n      }\n    ];\n\n    const response = await sendApiRequest(page, 'POST', API_URL, payload);\n    const expectedReason = 'New webhook(s) configured. Any updates to a webhook configuration should use the PUT method. Your request to enable this trigger is being processed. Webhook notifications for this trigger may take up 15 minutes to begin transmission.';\n    const json = await verifyApiResponse(response, {\n      Status: 'success',\n      Reason: expectedReason,\n      TotalConfigurations: 1,\n    });\n    expect(Array.isArray(json.NewConfigurations)).toBeTruthy();\n    expect(json.NewConfigurations.length).toBe(1);\n    const first = json.NewConfigurations[0];\n    expect(first.Name).toBe('test3');\n    expect(first.Active).toBe(true);\n    expect(first.Url).toBe('http://localhost:3000/webhook3');\n    expect(first.PayloadMaxItems).toBe(200);\n    expect(first.PayloadInterval).toBe(1);\n    expect(first.Triggers.POSubmit.Enabled).toBe(true);\n    expect(first.RetryHandling.Attempts).toBe(2);\n    expect(first.RetryHandling.Gap).toBe(3);\n    expect(first.ConfigurationMode).toBe('v1');\n    expect(typeof first.PreferencesUpdated).toBe('string');\n  });\n});\n",
    "manualSteps": [
      "Step 1: Prepare a POST request to http://localhost:3000/webhook/settings/ with the following payload (array of two webhooks):\n[\n  {\n    \"Name\": \"test1\",\n    \"Active\": true,\n    \"Authorization\": null,\n    \"Url\": \"http://localhost:3000/webhook\",\n    \"PayloadMaxItems\": 500,\n    \"PayloadInterval\": 1,\n    \"Triggers\": {\n      \"POSubmit\": { \"Enabled\": true, \"Filter\": \"ApprovalCode = A\" },\n      \"TOSubmit\": { \"Enabled\": true, \"Filter\": null },\n      \"WOSubmit\": { \"Enabled\": true, \"Filter\": null },\n      \"InventoryPolicyUpdate\": { \"Enabled\": false, \"Filter\": null },\n      \"ForecastWeeklyUpdate\": { \"Enabled\": true, \"Filter\": null },\n      \"ForecastMonthlyUpdate\": { \"Enabled\": false, \"Filter\": null }\n    },\n    \"RetryHandling\": { \"Attempts\": 5, \"Gap\": 10 },\n    \"ConfigurationMode\": \"v1\"\n  },\n  {\n    \"Name\": \"test2\",\n    \"Active\": false,\n    \"Authorization\": null,\n    \"Url\": \"http://localhost:3000/webhook2\",\n    \"PayloadMaxItems\": 100,\n    \"PayloadInterval\": 2,\n    \"Triggers\": {\n      \"POSubmit\": { \"Enabled\": false, \"Filter\": null },\n      \"TOSubmit\": { \"Enabled\": false, \"Filter\": null },\n      \"WOSubmit\": { \"Enabled\": false, \"Filter\": null },\n      \"InventoryPolicyUpdate\": { \"Enabled\": false, \"Filter\": null },\n      \"ForecastWeeklyUpdate\": { \"Enabled\": false, \"Filter\": null },\n      \"ForecastMonthlyUpdate\": { \"Enabled\": false, \"Filter\": null }\n    },\n    \"RetryHandling\": { \"Attempts\": 3, \"Gap\": 5 },\n    \"ConfigurationMode\": \"v1\"\n  }\n]\nStep 2: Send the POST request.\nStep 3: Verify the response field 'Status' is 'success'.\nStep 4: Verify the response field 'Reason' is 'New webhook(s) configured. Any updates to a webhook configuration should use the PUT method.'.\nStep 5: Verify the response field 'TotalConfigurations' is 2.\nStep 6: Verify 'NewConfigurations' is an array of length 2.\nStep 7: For the first configuration in 'NewConfigurations', verify:\n  - Name = 'test1'\n  - Active = true\n  - Url = 'http://localhost:3000/webhook'\n  - PayloadMaxItems = 500\n  - PayloadInterval = 1\n  - Triggers.POSubmit.Enabled = true\n  - Triggers.POSubmit.Filter = 'ApprovalCode = A'\n  - Triggers.ForecastWeeklyUpdate.Enabled = true\n  - Triggers.ForecastMonthlyUpdate.Enabled = false\n  - RetryHandling.Attempts = 5\n  - RetryHandling.Gap = 10\n  - ConfigurationMode = 'v1'\n  - PreferencesUpdated is a string (timestamp)\nStep 8: For the second configuration in 'NewConfigurations', verify:\n  - Name = 'test2'\n  - Active = false\n  - Url = 'http://localhost:3000/webhook2'\n  - PayloadMaxItems = 100\n  - PayloadInterval = 2\n  - Triggers.POSubmit.Enabled = false\n  - RetryHandling.Attempts = 3\n  - RetryHandling.Gap = 5\n  - ConfigurationMode = 'v1'\n  - PreferencesUpdated is a string (timestamp)\nStep 9: Edge case: Prepare a POST request with a payload that enables a new trigger (e.g. POSubmit) for a new webhook:\n[\n  {\n    \"Name\": \"test3\",\n    \"Active\": true,\n    \"Authorization\": null,\n    \"Url\": \"http://localhost:3000/webhook3\",\n    \"PayloadMaxItems\": 200,\n    \"PayloadInterval\": 1,\n    \"Triggers\": {\n      \"POSubmit\": { \"Enabled\": true, \"Filter\": null },\n      \"TOSubmit\": { \"Enabled\": false, \"Filter\": null },\n      \"WOSubmit\": { \"Enabled\": false, \"Filter\": null },\n      \"InventoryPolicyUpdate\": { \"Enabled\": false, \"Filter\": null },\n      \"ForecastWeeklyUpdate\": { \"Enabled\": false, \"Filter\": null },\n      \"ForecastMonthlyUpdate\": { \"Enabled\": false, \"Filter\": null }\n    },\n    \"RetryHandling\": { \"Attempts\": 2, \"Gap\": 3 },\n    \"ConfigurationMode\": \"v1\"\n  }\n]\nStep 10: Send the POST request.\nStep 11: Verify the response field 'Status' is 'success'.\nStep 12: Verify the response field 'Reason' is 'New webhook(s) configured. Any updates to a webhook configuration should use the PUT method. Your request to enable this trigger is being processed. Webhook notifications for this trigger may take up 15 minutes to begin transmission.'.\nStep 13: Verify the response field 'TotalConfigurations' is 1.\nStep 14: Verify 'NewConfigurations' is an array of length 1.\nStep 15: For the configuration in 'NewConfigurations', verify:\n  - Name = 'test3'\n  - Active = true\n  - Url = 'http://localhost:3000/webhook3'\n  - PayloadMaxItems = 200\n  - PayloadInterval = 1\n  - Triggers.POSubmit.Enabled = true\n  - RetryHandling.Attempts = 2\n  - RetryHandling.Gap = 3\n  - ConfigurationMode = 'v1'\n  - PreferencesUpdated is a string (timestamp)"
    ]
  },
  {
    "title": "Test user creation on /api/users endpoint",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/3",
    "utilsCode": "export async function sendApiRequest(page, method, url, payload) {\n  const response = await page.request.fetch(url, {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: payload ? JSON.stringify(payload) : undefined,\n    timeout: 1000 // 1 second timeout as per acceptance criteria\n  });\n  return response;\n}\n\nexport async function verifyApiResponse(response, expectedFields) {\n  // Check status\n  if (expectedFields.status !== undefined) {\n    if (response.status() !== expectedFields.status) {\n      throw new Error(`Expected status ${expectedFields.status}, got ${response.status()}`);\n    }\n  }\n  // Check response time\n  if (expectedFields.maxResponseTimeMs !== undefined) {\n    const timing = response.timing();\n    if (timing && timing.responseEnd - timing.startTime > expectedFields.maxResponseTimeMs) {\n      throw new Error(`Response took longer than ${expectedFields.maxResponseTimeMs}ms`);\n    }\n  }\n  const body = await response.json();\n  // Check name\n  if (expectedFields.name !== undefined) {\n    if (body.name !== expectedFields.name) {\n      throw new Error(`Expected name '${expectedFields.name}', got '${body.name}'`);\n    }\n  }\n  // Check job\n  if (expectedFields.job !== undefined) {\n    if (body.job !== expectedFields.job) {\n      throw new Error(`Expected job '${expectedFields.job}', got '${body.job}'`);\n    }\n  }\n  // Check id\n  if (expectedFields.id === 'auto') {\n    if (!('id' in body)) {\n      throw new Error('Response missing id field');\n    }\n    if (typeof body.id !== 'string' && typeof body.id !== 'number') {\n      throw new Error('id field is not a string or number');\n    }\n  }\n  // Check createdAt\n  if (expectedFields.createdAt === 'iso8601') {\n    if (!('createdAt' in body)) {\n      throw new Error('Response missing createdAt field');\n    }\n    // Simple ISO8601 validation\n    const iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    if (!iso8601Regex.test(body.createdAt)) {\n      throw new Error(`createdAt field is not a valid ISO8601 timestamp: ${body.createdAt}`);\n    }\n  }\n  return body;\n}\n",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { sendApiRequest, verifyApiResponse } from '../utils/utils.js';\n\ntest.describe('POST /api/users', () => {\n  test('should create user successfully (happy path)', async ({ page }) => {\n    const url = 'https://reqres.in/api/users';\n    const payload = {\n      name: 'morpheus',\n      job: 'leader'\n    };\n    const response = await sendApiRequest(page, 'POST', url, payload);\n    await verifyApiResponse(response, {\n      status: 201,\n      name: 'morpheus',\n      job: 'leader',\n      id: 'auto',\n      createdAt: 'iso8601',\n      maxResponseTimeMs: 1000\n    });\n  });\n\n  test('should fail with missing name (edge case)', async ({ page }) => {\n    const url = 'https://reqres.in/api/users';\n    const payload = {\n      job: 'leader'\n    };\n    const response = await sendApiRequest(page, 'POST', url, payload);\n    // Expect 201 or 400 depending on API behavior; here we expect 201 as per reqres.in behavior\n    await verifyApiResponse(response, {\n      status: 201,\n      job: 'leader',\n      id: 'auto',\n      createdAt: 'iso8601',\n      maxResponseTimeMs: 1000\n    });\n    // Optionally, check that name is undefined or missing\n    const body = await response.json();\n    expect(body.name).toBeUndefined();\n  });\n});\n",
    "manualSteps": [
      "Step 1: Open a REST client (e.g. Postman) and set the method to POST.",
      "Step 2: Set the URL to https://reqres.in/api/users.",
      "Step 3: In the request body, enter the following JSON:\n{\n  \"name\": \"morpheus\",\n  \"job\": \"leader\"\n}",
      "Step 4: Send the request.",
      "Step 5: Verify the response status is 201 Created.",
      "Step 6: Verify the response is received in less than 1 second.",
      "Step 7: Verify the response body contains:\n- name = \"morpheus\"\n- job = \"leader\"\n- id is present and is a string or number\n- createdAt is present and is a valid ISO8601 timestamp (e.g. 2025-09-26T10:15:30.000Z)",
      "Step 8 (Edge Case): Repeat steps 1-4, but use this body:\n{\n  \"job\": \"leader\"\n}",
      "Step 9: Verify the response status is 201 Created.",
      "Step 10: Verify the response body contains:\n- job = \"leader\"\n- id is present and is a string or number\n- createdAt is present and is a valid ISO8601 timestamp\n- name is missing or undefined"
    ]
  },
  {
    "title": "Test User Locked",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/2",
    "utilsCode": "export async function openPage(page, url) {\n  await page.goto(url);\n}\n\nexport async function fillInput(page, placeholder, value) {\n  await page.getByPlaceholder(placeholder).fill(value);\n}\n\nexport async function clickButton(page, buttonText) {\n  await page.getByRole('button', { name: buttonText }).click();\n}\n\nexport async function getErrorMessage(page) {\n  // The error message container has data-test=\"error\" on saucedemo\n  return await page.locator('[data-test=\"error\"]').textContent();\n}\n\nexport async function login(page, username, password) {\n  await fillInput(page, 'Username', username);\n  await fillInput(page, 'Password', password);\n  await clickButton(page, 'Login');\n}\n",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { openPage, login, getErrorMessage } from '../utils/utils.js';\n\ntest('Locked out user sees error message', async ({ page }) => {\n  await openPage(page, 'https://www.saucedemo.com/');\n  await login(page, 'locked_out_user', 'secret_sauce');\n  const errorMsg = await getErrorMessage(page);\n  expect(errorMsg).toContain('Epic sadface: Sorry, this user has been locked out.');\n});\n",
    "manualSteps": [
      "Step 1: Open https://www.saucedemo.com/ in a browser.",
      "Step 2: In the input with placeholder 'Username', enter: locked_out_user",
      "Step 3: In the input with placeholder 'Password', enter: secret_sauce",
      "Step 4: Click the 'Login' button.",
      "Step 5: Verify that an error message appears with the text: 'Epic sadface: Sorry, this user has been locked out.'",
      "Edge Case: Repeat steps 2-5 but leave the 'Password' field empty. Verify that the error message is: 'Epic sadface: Password is required'",
      "Edge Case: Repeat steps 2-5 but leave the 'Username' field empty. Verify that the error message is: 'Epic sadface: Username is required'",
      "Happy Path: Enter username 'standard_user' and password 'secret_sauce', click 'Login', and verify that you are navigated to the inventory page (URL contains '/inventory.html')."
    ]
  },
  {
    "title": "Test Login Successful",
    "url": "https://github.com/angelaantunes/devqa-ai/issues/1",
    "utilsCode": "export async function openPage(page, url) {\n  await page.goto(url);\n}\n\nexport async function fillInput(page, placeholder, value) {\n  await page.locator(`input[placeholder='${placeholder}']`).fill(value);\n}\n\nexport async function clickButton(page, buttonText) {\n  await page.getByRole('button', { name: buttonText }).click();\n}\n\nexport async function verifyNavigation(page, expectedUrl) {\n  await page.waitForURL(expectedUrl);\n}\n\nexport async function login(page, username, password) {\n  await fillInput(page, 'Username', username);\n  await fillInput(page, 'Password', password);\n  await clickButton(page, 'Login');\n}\n",
    "playwrightCode": "import { test, expect } from '@playwright/test';\nimport { openPage, login, verifyNavigation } from '../utils/utils.js';\n\ntest('Test Login Successful', async ({ page }) => {\n  await openPage(page, 'https://www.saucedemo.com/');\n  await login(page, 'standard_user', 'secret_sauce');\n  await verifyNavigation(page, 'https://www.saucedemo.com/inventory.html');\n  // Optionally, verify some element on the inventory page\n  await expect(page.locator('.inventory_list')).toBeVisible();\n});\n",
    "manualSteps": [
      "Step 1: Open the page https://www.saucedemo.com/",
      "Step 2: Enter the username 'standard_user' into the input with placeholder 'Username'.",
      "Step 3: Enter the password 'secret_sauce' into the input with placeholder 'Password'.",
      "Step 4: Click the 'Login' button.",
      "Step 5: Verify that the browser navigates to https://www.saucedemo.com/inventory.html.",
      "Step 6 (Happy Path): Confirm that the inventory list is visible on the page.",
      "Step 7 (Edge Case): Repeat steps 2-4 with username 'standard_user' and password 'wrong_password'.",
      "Step 8: Verify that an error message appears: 'Epic sadface: Username and password do not match any user in this service'."
    ]
  }
]